{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport todoData from \"../Helpers/todoData\";\nimport TodoItem from \"./TodoItem\";\nexport default function TodoList() {\n  var _useState = useState(todoData.filter(function (item) {\n    return item.done;\n  }).length),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var _useState3 = useState(todoData),\n      _useState4 = _slicedToArray(_useState3, 2),\n      todos = _useState4[0],\n      setTodos = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newTodoText = _useState6[0],\n      setNewTodoText = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      shouldShow = _useState8[0],\n      setShouldShow = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      shouldDone = _useState10[0],\n      setShouldDone = _useState10[1];\n\n  var onPressed = function onPressed(offset) {\n    setCount(count + offset);\n  };\n\n  var deleteTodo = function deleteTodo(id) {\n    var newTodos = todos.filter(function (item) {\n      return item.id != id;\n    });\n    setTodos(newTodos);\n    setCount(newTodos.filter(function (item) {\n      return item.done;\n    }).length);\n  };\n\n  var addNewTodo = function addNewTodo() {\n    var monId = Math.max.apply(Math, _toConsumableArray(todos.map(function (item) {\n      return item.id;\n    }))) + 1;\n    setTodos([].concat(_toConsumableArray(todos), [{\n      id: monId,\n      content: newTodoText,\n      done: false\n    }]));\n    setCount(todos.filter(function (item) {\n      return item.done;\n    }).length);\n  };\n\n  return React.createElement(View, null, shouldShow ? React.createElement(FlatList, {\n    style: {\n      paddingTop: 125\n    },\n    data: todos,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(TodoItem, {\n        onPressed: onPressed,\n        item: item,\n        deleteTodo: deleteTodo,\n        beDone: shouldDone\n      });\n    }\n  }) : null, React.createElement(Button, {\n    title: \"Tout afficher/ Tout retirer\",\n    onPress: function onPress() {\n      return setShouldShow(!shouldShow);\n    }\n  }), React.createElement(Text, null, \"Il y a \", count, \" slider a true\"), React.createElement(TextInput, {\n    onChangeText: setNewTodoText,\n    placeholder: \"saisir ici un nouvel item\",\n    onSubmitEditing: addNewTodo,\n    value: newTodoText\n  }));\n}","map":{"version":3,"sources":["/mnt/c/Users/sacha/Documents/License-informatique/L3/semestre2/devMobile/TP2/app/components/TodoList.js"],"names":["React","useState","todoData","TodoItem","TodoList","filter","item","done","length","count","setCount","todos","setTodos","newTodoText","setNewTodoText","shouldShow","setShouldShow","shouldDone","setShouldDone","onPressed","offset","deleteTodo","id","newTodos","addNewTodo","monId","Math","max","map","content","paddingTop"],"mappings":"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","sourcesContent":["import React,{useState} from \"react\";\nimport { StyleSheet, View, TextInput, Button, Text, FlatList, Switch } from 'react-native';\n\nimport todoData from '../Helpers/todoData';\nimport TodoItem from './TodoItem';\n\nexport default function TodoList(){\n    const [count, setCount] = useState(todoData.filter((item)=>item.done).length);\n    const [todos, setTodos] = useState(todoData);\n    const [newTodoText, setNewTodoText] = useState(\"\");\n    const [shouldShow, setShouldShow] = useState(true);\n    const [shouldDone, setShouldDone] = useState(true);\n\n    const onPressed = (offset) => {setCount(count + offset)}\n\n    const deleteTodo = (id) => {\n        const newTodos = todos.filter(item => item.id != id)\n        setTodos(newTodos)\n        setCount(newTodos.filter(item => item.done).length)\n    }\n\n    const addNewTodo = () => {\n        const monId = Math.max(...todos.map(item => item.id)) + 1\n        setTodos([...todos, { id: monId, content: newTodoText, done: false }])\n        setCount(todos.filter(item => item.done).length)\n    }\n\n\n    return (\n        <View>\n            {shouldShow ? (<FlatList\n                style={{ paddingTop:125}}\n                data={todos}\n                renderItem={({item}) => <TodoItem onPressed = {onPressed} item={item} deleteTodo = {deleteTodo} beDone = {shouldDone}/>} />) : null}\n            <Button\n                title=\"Tout afficher/ Tout retirer\"\n                onPress={() => setShouldShow(!shouldShow)}\n            />\n            <Text>Il y a {count} slider a true</Text>\n            <TextInput\n                onChangeText={setNewTodoText}\n                placeholder='saisir ici un nouvel item'\n                onSubmitEditing={addNewTodo}\n                value={newTodoText}\n            />\n        </View>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}