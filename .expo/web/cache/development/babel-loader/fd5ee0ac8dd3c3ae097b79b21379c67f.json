{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport todoData from \"../Helpers/todoData\";\nimport TodoItem from \"./TodoItem\";\nimport { getTaskList, getTasks } from \"../API/todoAPI\";\nimport { TokenContext, UsernameContext } from \"../Context/Context\";\nexport default function TodoLists(props) {\n  var _useContext = useContext(UsernameContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      user = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var _useContext3 = useContext(TokenContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      token = _useContext4[0],\n      setToken = _useContext4[1];\n\n  var _useState = useState(todoData.filter(function (item) {\n    return item.done;\n  }).length),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var _useState3 = useState(todoData),\n      _useState4 = _slicedToArray(_useState3, 2),\n      todos = _useState4[0],\n      setTodos = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newTodoText = _useState6[0],\n      setNewTodoText = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      shouldShow = _useState8[0],\n      setShouldShow = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      shouldDone = _useState10[0],\n      setShouldDone = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      shouldNotDone = _useState12[0],\n      setShouldNotDone = _useState12[1];\n\n  useEffect(function () {\n    getTasks(user, token).then(function (data) {\n      console.log(data);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }, []);\n\n  var onPressed = function onPressed(offset) {\n    setCount(count + offset);\n  };\n\n  var deleteTodo = function deleteTodo(id) {\n    var newTodos = todos.filter(function (item) {\n      return item.id != id;\n    });\n    setTodos(newTodos);\n    setCount(newTodos.filter(function (item) {\n      return item.done;\n    }).length);\n  };\n\n  var addNewTodo = function addNewTodo() {\n    var monId = Math.max.apply(Math, _toConsumableArray(todos.map(function (item) {\n      return item.id;\n    }))) + 1;\n    setTodos([].concat(_toConsumableArray(todos), [{\n      id: monId,\n      content: newTodoText,\n      done: false\n    }]));\n    setCount(todos.filter(function (item) {\n      return item.done;\n    }).length);\n  };\n\n  var checkAll = function checkAll() {\n    setTodos(todos.map(function (item) {\n      return {\n        id: item.id,\n        content: item.content,\n        done: true\n      };\n    }));\n    setCount(todos.length);\n  };\n\n  var checkNone = function checkNone() {\n    setTodos(todos.map(function (item) {\n      return {\n        id: item.id,\n        content: item.content,\n        done: false\n      };\n    }));\n    setCount(todos.length);\n  };\n\n  return React.createElement(View, null, shouldShow ? React.createElement(FlatList, {\n    style: {\n      paddingTop: 125\n    },\n    data: todos,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(TodoItem, {\n        onPressed: onPressed,\n        item: item,\n        deleteTodo: deleteTodo,\n        beDone: shouldDone,\n        beNotDone: shouldNotDone\n      });\n    }\n  }) : null, React.createElement(Button, {\n    title: \"Tout afficher/ Tout retirer\",\n    onPress: function onPress() {\n      return setShouldShow(!shouldShow);\n    }\n  }), React.createElement(Button, {\n    title: \"Seulement done\",\n    onPress: function onPress() {\n      return setShouldDone(!shouldDone);\n    }\n  }), React.createElement(Button, {\n    title: \"Seulement pas done\",\n    onPress: function onPress() {\n      return setShouldNotDone(!shouldNotDone);\n    }\n  }), React.createElement(Button, {\n    title: \"CkeckAll\",\n    onPress: function onPress() {\n      return checkAll();\n    }\n  }), React.createElement(Button, {\n    title: \"CkeckNone\",\n    onPress: function onPress() {\n      return checkNone();\n    }\n  }), React.createElement(Text, null, \"Il y a \", count, \" slider a true\"), React.createElement(TextInput, {\n    onChangeText: setNewTodoText,\n    placeholder: \"saisir ici un nouvel item\",\n    onSubmitEditing: addNewTodo,\n    value: newTodoText\n  }));\n}","map":{"version":3,"sources":["C:/Users/sacha/Documents/License-informatique/L3/semestre2/devMobile/TP2/app/Screen/TodoLists.js"],"names":["React","useContext","useEffect","useState","todoData","TodoItem","getTaskList","getTasks","TokenContext","UsernameContext","TodoLists","props","user","setUser","token","setToken","filter","item","done","length","count","setCount","todos","setTodos","newTodoText","setNewTodoText","shouldShow","setShouldShow","shouldDone","setShouldDone","shouldNotDone","setShouldNotDone","then","data","console","log","catch","err","onPressed","offset","deleteTodo","id","newTodos","addNewTodo","monId","Math","max","map","content","checkAll","checkNone","paddingTop"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from \"react\";\nimport { StyleSheet, View, TextInput, Button, Text, FlatList, Switch } from 'react-native';\n\nimport todoData from '../Helpers/todoData';\nimport TodoItem from './TodoItem';\nimport {getTaskList, getTasks} from \"../API/todoAPI\";\nimport {TokenContext, UsernameContext} from \"../Context/Context\";\n\nexport default function TodoLists(props){\n    const [user,setUser] = useContext(UsernameContext)\n    const [token,setToken] = useContext(TokenContext)\n    const [count, setCount] = useState(todoData.filter((item)=>item.done).length);\n    const [todos, setTodos] = useState(todoData);\n    const [newTodoText, setNewTodoText] = useState(\"\");\n    const [shouldShow, setShouldShow] = useState(true);\n    const [shouldDone, setShouldDone] = useState(false);\n    const [shouldNotDone, setShouldNotDone] = useState(false);\n\n    useEffect(() => {\n        getTasks(user,token)\n            .then(data => {\n                console.log(data);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    },[])\n\n    const onPressed = (offset) => {setCount(count + offset)}\n\n    const deleteTodo = (id) => {\n        const newTodos = todos.filter(item => item.id != id)\n        setTodos(newTodos)\n        setCount(newTodos.filter(item => item.done).length)\n    }\n\n    const addNewTodo = () => {\n        const monId = Math.max(...todos.map(item => item.id)) + 1\n        setTodos([...todos, { id: monId, content: newTodoText, done: false }])\n        setCount(todos.filter(item => item.done).length)\n    }\n\n    const checkAll = () => {\n        setTodos(todos.map(item => {return {id: item.id, content: item.content, done:true}}))\n        setCount(todos.length)\n    }\n\n    const checkNone = () => {\n        setTodos(todos.map(item => {return {id: item.id, content: item.content, done:false}}))\n        setCount(todos.length)\n    }\n\n    return (\n        <View>\n            {shouldShow ? (<FlatList\n                style={{ paddingTop:125}}\n                data={todos}\n                renderItem={({item}) => <TodoItem onPressed = {onPressed} item={item} deleteTodo = {deleteTodo} beDone = {shouldDone} beNotDone = {shouldNotDone}/>} />) : null}\n            <Button\n                title=\"Tout afficher/ Tout retirer\"\n                onPress={() => setShouldShow(!shouldShow)}\n            />\n            <Button\n                title=\"Seulement done\"\n                onPress={() => setShouldDone(!shouldDone)}\n            />\n            <Button\n                title=\"Seulement pas done\"\n                onPress={() => setShouldNotDone(!shouldNotDone)}\n            />\n            <Button\n                title=\"CkeckAll\"\n                onPress={() => checkAll()}\n            />\n            <Button\n                title=\"CkeckNone\"\n                onPress={() => checkNone()}\n            />\n            <Text>Il y a {count} slider a true</Text>\n            <TextInput\n                onChangeText={setNewTodoText}\n                placeholder='saisir ici un nouvel item'\n                onSubmitEditing={addNewTodo}\n                value={newTodoText}\n            />\n        </View>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}