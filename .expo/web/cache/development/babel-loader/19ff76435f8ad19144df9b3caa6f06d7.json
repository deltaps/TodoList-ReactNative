{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { TokenContext, UsernameContext } from \"../Context/Context\";\nimport { deleteTaskList, deleteUsers, getTaskList, users } from \"../API/todoAPI\";\nimport TodoLists from \"../components/TodoLists\";\nexport default function AdminScreen() {\n  var _useContext = useContext(UsernameContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      username = _useContext2[0],\n      setUsername = _useContext2[1];\n\n  var _useContext3 = useContext(TokenContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      token = _useContext4[0],\n      setToken = _useContext4[1];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      allUsers = _useState2[0],\n      setAllUsers = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nbUsers = _useState4[0],\n      setNbUsers = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      actualUser = _useState6[0],\n      setActualUser = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      todoListUser = _useState8[0],\n      setTodoListUser = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      nbTasksUser = _useState10[0],\n      setNbTasksUser = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      taskListIdUser = _useState12[0],\n      setTaskListIdUser = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      taskListNameUser = _useState14[0],\n      setTaskListNameUser = _useState14[1];\n\n  var _useState15 = useState(null),\n      _useState16 = _slicedToArray(_useState15, 2),\n      erreur = _useState16[0],\n      setErreur = _useState16[1];\n\n  useEffect(function () {\n    users(username, token).then(function (data) {\n      setAllUsers(data);\n      setNbUsers(data.length);\n    }).catch(function (err) {\n      setErreur(err.message);\n    });\n  }, []);\n\n  var deleteUserFunction = function deleteUserFunction(id) {\n    deleteUsers(id, token).then(function () {\n      users(username, token).then(function (data) {\n        setAllUsers(data);\n        setNbUsers(data.length);\n      });\n    });\n  };\n\n  var deleteTaskListFunction = function deleteTaskListFunction(id) {\n    deleteTaskList(token, id).then(function () {\n      getTaskList(actualUser, token).then(function (data) {\n        setNbTasksUser(data.length);\n        setTodoListUser(data);\n      });\n    });\n  };\n\n  return taskListIdUser != null ? React.createElement(View, null, React.createElement(Button, {\n    title: \"Retour\",\n    onPress: function onPress() {\n      setTaskListNameUser(null);\n      setTaskListIdUser(null);\n    }\n  }), React.createElement(Text, null, \"Titre de la tasksliste: \", taskListNameUser, \" de l'utilisateur \", actualUser, \" avec l'id : \", taskListIdUser), React.createElement(TodoLists, {\n    id: taskListIdUser\n  })) : actualUser != null ? React.createElement(View, null, React.createElement(Button, {\n    title: \"Retour\",\n    onPress: function onPress() {\n      setActualUser(null);\n    }\n  }), React.createElement(Text, null, \"L'utilisateur \", actualUser, \" poss\\xE8de \", nbTasksUser, \" todolists :\"), React.createElement(FlatList, {\n    data: todoListUser,\n    renderItem: function renderItem(item) {\n      return React.createElement(View, null, React.createElement(Button, {\n        title: item.item.title,\n        onPress: function onPress() {\n          setTaskListIdUser(item.item.id);\n          setTaskListNameUser(item.item.title);\n        }\n      }), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return deleteTaskListFunction(item.item.id);\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/trash-can-outline.png\"),\n        style: {\n          height: 24,\n          width: 24\n        }\n      })));\n    }\n  })) : React.createElement(View, null, React.createElement(Text, null, \"Bienvenue dans la section admin, ci-dessous dessous ce trouve tous les utilisateur de l'application\"), React.createElement(Text, null, \"Il y a actuellement \", nbUsers, \" utilisateurs inscrit sur l'application\"), React.createElement(FlatList, {\n    data: allUsers,\n    renderItem: function renderItem(user) {\n      return React.createElement(View, null, React.createElement(Text, null, \"Nom de l'utilisateur : \", user.item.username), React.createElement(Button, {\n        title: \"TodoLists de l'utilisateur\",\n        onPress: function onPress() {\n          getTaskList(user.item.username, token).then(function (data) {\n            setNbTasksUser(data.length);\n            setTodoListUser(data);\n          }).catch(function (err) {\n            setErreur(err.message);\n          });\n          setActualUser(user.item.username);\n        }\n      }), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return deleteUserFunction(user.item.id);\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/trash-can-outline.png\"),\n        style: {\n          height: 24,\n          width: 24\n        }\n      })));\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/sacha/Documents/License-informatique/L3/semestre2/devMobile/TP2/app/Screen/AdminScreen.js"],"names":["React","useContext","useEffect","useState","TokenContext","UsernameContext","deleteTaskList","deleteUsers","getTaskList","users","TodoLists","AdminScreen","username","setUsername","token","setToken","allUsers","setAllUsers","nbUsers","setNbUsers","actualUser","setActualUser","todoListUser","setTodoListUser","nbTasksUser","setNbTasksUser","taskListIdUser","setTaskListIdUser","taskListNameUser","setTaskListNameUser","erreur","setErreur","then","data","length","catch","err","message","deleteUserFunction","id","deleteTaskListFunction","item","title","require","height","width","user"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\r\nimport {View, Text, Button, TouchableOpacity, Image, FlatList} from 'react-native'\r\nimport {TokenContext, UsernameContext} from \"../Context/Context\";\r\nimport {deleteTaskList, deleteUsers, getTaskList, users} from \"../API/todoAPI\";\r\nimport TodoLists from \"../components/TodoLists\";\r\n//TODO pouvoir changer le slider pour tout les utilisateurs (tous marche sinon)\r\n\r\nexport default function AdminScreen () {\r\n    const [username, setUsername] = useContext(UsernameContext)\r\n    const [token,setToken] = useContext(TokenContext)\r\n\r\n    const [allUsers,setAllUsers] = useState(null)\r\n    const [nbUsers,setNbUsers] = useState(0)\r\n    const [actualUser,setActualUser] = useState(null)\r\n\r\n    const [todoListUser,setTodoListUser] = useState(null)\r\n    const [nbTasksUser,setNbTasksUser] = useState(0)\r\n    const [taskListIdUser,setTaskListIdUser] = useState(null)\r\n    const [taskListNameUser,setTaskListNameUser] = useState(null)\r\n    const [erreur,setErreur] = useState(null)\r\n\r\n    useEffect(() => {\r\n        users(username,token)\r\n            .then(data => {\r\n                setAllUsers(data)\r\n                setNbUsers(data.length)\r\n            })\r\n            .catch(err => {\r\n                setErreur(err.message)\r\n            })\r\n    },[])\r\n\r\n    const deleteUserFunction = (id) => {\r\n        deleteUsers(id,token)\r\n            .then(() => {\r\n                users(username,token)\r\n                    .then(data => {\r\n                        setAllUsers(data)\r\n                        setNbUsers(data.length)\r\n                    })\r\n            })\r\n    }\r\n\r\n    const deleteTaskListFunction = (id) => {\r\n        deleteTaskList(token,id)\r\n            .then(() => {\r\n                getTaskList(actualUser,token)\r\n                    .then(data => {\r\n                        setNbTasksUser(data.length)\r\n                        setTodoListUser(data)\r\n                    })\r\n            })\r\n    }\r\n\r\n    return (\r\n\r\n        taskListIdUser != null ? (\r\n            <View>\r\n                <Button\r\n                    title={\"Retour\"}\r\n                    onPress={() => {\r\n                        setTaskListNameUser(null)\r\n                        setTaskListIdUser(null)\r\n                    }}\r\n                />\r\n                <Text>\r\n                    Titre de la tasksliste: {taskListNameUser} de l'utilisateur {actualUser} avec l'id : {taskListIdUser}\r\n                </Text>\r\n                <TodoLists id = {taskListIdUser}/>\r\n            </View>\r\n        ) : (\r\n            actualUser != null ? (\r\n                <View>\r\n                    <Button\r\n                        title={\"Retour\"}\r\n                        onPress={() => {\r\n                            setActualUser(null)\r\n                        }}\r\n                    />\r\n                    <Text>L'utilisateur {actualUser} possède {nbTasksUser} todolists :</Text>\r\n                    <FlatList data={todoListUser} renderItem={(item) =>\r\n                        <View>\r\n                            <Button\r\n                                title={item.item.title}\r\n                                onPress={() => {\r\n                                    setTaskListIdUser(item.item.id)\r\n                                    setTaskListNameUser(item.item.title)\r\n                                }}\r\n                            />\r\n                            <TouchableOpacity onPress={() => deleteTaskListFunction(item.item.id)}>\r\n                                <Image source={require('../assets/trash-can-outline.png')} style={{ height: 24, width: 24 }} />\r\n                            </TouchableOpacity>\r\n                        </View>}>\r\n                    </FlatList>\r\n                </View>\r\n            ) : (\r\n                <View>\r\n                    <Text>Bienvenue dans la section admin, ci-dessous dessous ce trouve tous les utilisateur de l'application</Text>\r\n                    <Text>Il y a actuellement {nbUsers} utilisateurs inscrit sur l'application</Text>\r\n                    <FlatList data={allUsers} renderItem={(user) =>\r\n                        <View>\r\n                            <Text>Nom de l'utilisateur : {user.item.username}</Text>\r\n                            <Button\r\n                                title=\"TodoLists de l'utilisateur\"\r\n                                onPress={() => {\r\n                                    getTaskList(user.item.username,token)\r\n                                        .then(data => {\r\n                                            setNbTasksUser(data.length)\r\n                                            setTodoListUser(data)\r\n                                        })\r\n                                        .catch(err => {\r\n                                            setErreur(err.message)\r\n                                        })\r\n                                    //TODO Prendre la liste des todoliste de l'utilisteurs choisie.\r\n                                    setActualUser(user.item.username)\r\n                                }}\r\n                            />\r\n                            <TouchableOpacity onPress={() => deleteUserFunction(user.item.id)}>\r\n                                <Image source={require('../assets/trash-can-outline.png')} style={{ height: 24, width: 24 }} />\r\n                            </TouchableOpacity>\r\n                        </View>}>\r\n                    </FlatList>\r\n                </View>\r\n            )\r\n        )\r\n\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}