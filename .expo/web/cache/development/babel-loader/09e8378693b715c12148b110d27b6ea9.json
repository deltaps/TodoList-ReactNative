{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { getTaskList, createTaskList, deleteTaskList } from \"../API/todoAPI\";\nimport { TokenContext, UsernameContext } from \"../Context/Context\";\nimport TodoLists from \"./TodoLists\";\nexport default function TodoListsScreen() {\n  var _useContext = useContext(UsernameContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      user = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var _useContext3 = useContext(TokenContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      token = _useContext4[0],\n      setToken = _useContext4[1];\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      erreur = _useState2[0],\n      setErreur = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nbTasks = _useState6[0],\n      setNbTasks = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      title = _useState8[0],\n      setTitle = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      taskListId = _useState10[0],\n      setTaskListId = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      taskListTitle = _useState12[0],\n      setTaskListTitle = _useState12[1];\n\n  useEffect(function () {\n    getTaskList(user, token).then(function (data) {\n      setNbTasks(data.length);\n      setData(data);\n    }).catch(function (err) {\n      setErreur(err.message);\n    });\n  }, []);\n\n  var addTaskList = function addTaskList() {\n    createTaskList(token, user, title).then(function () {\n      getTaskList(user, token).then(function (data) {\n        setNbTasks(data.length);\n        setData(data);\n      });\n    });\n  };\n\n  var deleteTaskListFunction = function deleteTaskListFunction(id) {\n    deleteTaskList(token, id).then(function () {\n      getTaskList(user, token).then(function (data) {\n        setNbTasks(data.length);\n        setData(data);\n      });\n    });\n  };\n\n  return taskListId != null ? React.createElement(View, null, React.createElement(Button, {\n    title: \"Retour\",\n    onPress: function onPress() {\n      setTaskListTitle(null);\n      setTaskListId(null);\n    }\n  }), React.createElement(Text, null, \"Titre de la tasksliste: \", taskListTitle), React.createElement(TodoLists, {\n    id: taskListId\n  })) : erreur != null ? React.createElement(View, null, React.createElement(Text, null, \"Bienvenue sans le liste des todos\"), React.createElement(Text, null, erreur)) : React.createElement(SafeAreaView, null, React.createElement(Text, null, \"Bienvenue sans le liste des todos\"), React.createElement(TextInput, {\n    onChangeText: setTitle,\n    placeholder: \"saisir ici une nouvelle tasklist\",\n    onSubmitEditing: addTaskList,\n    value: title\n  }), React.createElement(Text, null, \"Vous poss\\xE9dez \", nbTasks, \" tasksLists\"), React.createElement(FlatList, {\n    data: data,\n    renderItem: function renderItem(item) {\n      return React.createElement(View, null, React.createElement(Button, {\n        title: item.item.title,\n        onPress: function onPress() {\n          setTaskListId(item.item.id);\n          setTaskListTitle(item.item.title);\n        }\n      }), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return deleteTaskListFunction(item.item.id);\n        }\n      }, React.createElement(Image, {\n        source: require(\"../assets/trash-can-outline.png\"),\n        style: {\n          height: 24,\n          width: 24\n        }\n      })));\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/sacha/Documents/License-informatique/L3/semestre2/devMobile/TP2/app/Screen/TodoListsScreen.js"],"names":["React","useContext","useEffect","useState","getTaskList","createTaskList","deleteTaskList","TokenContext","UsernameContext","TodoLists","TodoListsScreen","user","setUser","token","setToken","erreur","setErreur","data","setData","nbTasks","setNbTasks","title","setTitle","taskListId","setTaskListId","taskListTitle","setTaskListTitle","then","length","catch","err","message","addTaskList","deleteTaskListFunction","id","item","require","height","width"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react'\r\nimport {View, Text, FlatList, TextInput, SafeAreaView, Button, Image, TouchableOpacity,ScrollView} from 'react-native'\r\nimport {getTaskList, createTaskList,deleteTaskList} from \"../API/todoAPI\";\r\nimport {TokenContext,UsernameContext} from \"../Context/Context\";\r\nimport TodoLists from \"./TodoLists\";\r\n\r\nexport default function TodoListsScreen(){\r\n    const [user,setUser] = useContext(UsernameContext)\r\n    const [token,setToken] = useContext(TokenContext)\r\n    const [erreur,setErreur] = useState(null)\r\n    const [data,setData] = useState(null)\r\n    const [nbTasks,setNbTasks] = useState(null)\r\n    const [title,setTitle] = useState(\"\")\r\n    const [taskListId,setTaskListId] = useState(null)\r\n    const [taskListTitle,setTaskListTitle] = useState(null)\r\n\r\n    useEffect(() => {\r\n        getTaskList(user,token)\r\n            .then(data => {\r\n                setNbTasks(data.length)\r\n                setData(data)\r\n            })\r\n            .catch(err => {\r\n                setErreur(err.message)\r\n            })\r\n    },[])\r\n\r\n    const addTaskList = () => {\r\n        createTaskList(token,user,title)\r\n            .then( () => {\r\n                getTaskList(user,token)\r\n                    .then(data => {\r\n                        setNbTasks(data.length)\r\n                        setData(data)\r\n                    })\r\n            })\r\n    }\r\n\r\n    const deleteTaskListFunction = (id) => {\r\n        deleteTaskList(token,id)\r\n            .then(() => {\r\n                getTaskList(user,token)\r\n                    .then(data => {\r\n                        setNbTasks(data.length)\r\n                        setData(data)\r\n                    })\r\n            })\r\n    }\r\n\r\n    return (\r\n        taskListId != null ? (\r\n            <View>\r\n                <Button\r\n                    title={\"Retour\"}\r\n                    onPress={() => {\r\n                        setTaskListTitle(null)\r\n                        setTaskListId(null)\r\n                    }}\r\n                />\r\n                <Text>\r\n                    Titre de la tasksliste: {taskListTitle}\r\n                </Text>\r\n                <TodoLists id = {taskListId}/>\r\n            </View>\r\n        ) : (\r\n            erreur != null ? (\r\n                <View>\r\n                    <Text>Bienvenue sans le liste des todos</Text>\r\n                    <Text>{erreur}</Text>\r\n                </View>\r\n            ) : (\r\n                <SafeAreaView>\r\n                    <Text>Bienvenue sans le liste des todos</Text>\r\n                    <TextInput\r\n                        onChangeText={setTitle}\r\n                        placeholder='saisir ici une nouvelle tasklist'\r\n                        onSubmitEditing={addTaskList}\r\n                        value={title}\r\n                    />\r\n                    <Text>Vous possédez {nbTasks} tasksLists</Text>\r\n                    <FlatList data={data} renderItem={(item) =>\r\n                        <View>\r\n                            <Button\r\n                                title={item.item.title}\r\n                                onPress={() => {\r\n                                    setTaskListId(item.item.id)\r\n                                    setTaskListTitle(item.item.title)\r\n                                }}\r\n                            />\r\n                            <TouchableOpacity onPress={() => deleteTaskListFunction(item.item.id)}>\r\n                                <Image source={require('../assets/trash-can-outline.png')} style={{ height: 24, width: 24 }} />\r\n                            </TouchableOpacity>\r\n                        </View>}>\r\n                    </FlatList>\r\n                </SafeAreaView>\r\n            )\r\n        )\r\n    )\r\n\r\n}\r\n/*\r\n\r\n */"]},"metadata":{},"sourceType":"module"}