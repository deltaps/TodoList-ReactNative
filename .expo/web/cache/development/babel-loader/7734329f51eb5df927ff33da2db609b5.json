{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { updateTaskList } from \"../API/todoAPI\";\nimport { TokenContext, UsernameContext } from \"../Context/Context\";\nexport default function TodoItem(props) {\n  var _useContext = useContext(UsernameContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      user = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var _useContext3 = useContext(TokenContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      token = _useContext4[0],\n      setToken = _useContext4[1];\n\n  var _useState = useState(props.item.done),\n      _useState2 = _slicedToArray(_useState, 2),\n      done = _useState2[0],\n      setDone = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      id = _useState4[0],\n      setId = _useState4[1];\n\n  var changeDone = function changeDone(state) {\n    setDone(state);\n    updateTaskList(token, id, state).then(function () {\n      props.onPressed(state ? 1 : -1);\n    });\n  };\n\n  useEffect(function () {\n    changeDone(props.item.done);\n    setId(props.id);\n  }, [props.item.done]);\n\n  if (props.beDone) {\n    return React.createElement(View, {\n      style: styles.content\n    }, done ? React.createElement(Switch, {\n      value: done,\n      onValueChange: function onValueChange(state) {\n        changeDone(state);\n      }\n    }) : null, done ? React.createElement(Text, {\n      style: [styles.text_item, {\n        textDecorationLine: done ? 'line-through' : 'none'\n      }]\n    }, props.item.content) : null, done ? React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return props.deleteTodo(props.item.id);\n      }\n    }, React.createElement(Image, {\n      source: require(\"../assets/trash-can-outline.png\"),\n      style: {\n        height: 24,\n        width: 24\n      }\n    })) : null);\n  } else if (props.beNotDone) {\n    return React.createElement(View, {\n      style: styles.content\n    }, !done ? React.createElement(Switch, {\n      value: done,\n      onValueChange: function onValueChange(state) {\n        changeDone(state);\n      }\n    }) : null, !done ? React.createElement(Text, {\n      style: [styles.text_item, {\n        textDecorationLine: done ? 'line-through' : 'none'\n      }]\n    }, props.item.content) : null, !done ? React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return props.deleteTodo(props.item.id);\n      }\n    }, React.createElement(Image, {\n      source: require(\"../assets/trash-can-outline.png\"),\n      style: {\n        height: 24,\n        width: 24\n      }\n    })) : null);\n  } else {\n    return React.createElement(View, {\n      style: styles.content\n    }, React.createElement(Switch, {\n      value: done,\n      onValueChange: function onValueChange(state) {\n        changeDone(state);\n      }\n    }), React.createElement(Text, {\n      style: [styles.text_item, {\n        textDecorationLine: done ? 'line-through' : 'none'\n      }]\n    }, props.item.content), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return props.deleteTodo(props.item.id);\n      }\n    }, React.createElement(Image, {\n      source: require(\"../assets/trash-can-outline.png\"),\n      style: {\n        height: 24,\n        width: 24\n      }\n    })));\n  }\n}\nvar styles = StyleSheet.create({\n  content: {\n    flexDirection: 'row'\n  },\n  text_item: {\n    marginLeft: 10,\n    width: 150\n  }\n});","map":{"version":3,"sources":["C:/Users/sacha/Documents/License-informatique/L3/semestre2/devMobile/TP2/app/Screen/TodoItem.js"],"names":["React","useContext","useEffect","useState","updateTaskList","TokenContext","UsernameContext","TodoItem","props","user","setUser","token","setToken","item","done","setDone","id","setId","changeDone","state","then","onPressed","beDone","styles","content","text_item","textDecorationLine","deleteTodo","require","height","width","beNotDone","StyleSheet","create","flexDirection","marginLeft"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from \"react\";\nimport { Image, View, Text, StyleSheet, Switch, TouchableOpacity } from 'react-native';\nimport {updateTaskList} from \"../API/todoAPI\";\nimport {TokenContext, UsernameContext} from \"../Context/Context\";\n\nexport default function TodoItem(props) {\n    //console.log(props.item);\n    // Pour être remis a jour, on vas utiliser useEffects\n\n    const [user,setUser] = useContext(UsernameContext)\n    const [token,setToken] = useContext(TokenContext)\n    const [done, setDone] = useState(props.item.done);\n    const [id,setId] = useState(null);\n\n    const changeDone = (state) => {\n        setDone(state)\n        updateTaskList(token,id,state)\n            .then(() => {\n                props.onPressed(state ? 1 : -1)\n            })//TODO .then???\n         // Marche pas le compteur la maxiDisco\n    }\n\n    useEffect(() => {\n        changeDone(props.item.done)\n        setId(props.id)\n    }, [props.item.done])\n\n    if(props.beDone){ // Autre manière, mettre deux liste dans le père\n        return (\n            <View style={styles.content}>\n                {done ? (<Switch value={done} onValueChange={(state) => {changeDone(state)}} />) : null}\n                {done ? (<Text style={[styles.text_item, { textDecorationLine: done ? 'line-through' : 'none' }]}>{props.item.content}</Text>) : null}\n                {done ? (<TouchableOpacity onPress={() => props.deleteTodo(props.item.id)}>\n                    <Image source={require('../assets/trash-can-outline.png')} style={{ height: 24, width: 24 }} />\n                </TouchableOpacity>) : null}\n\n            </View>\n        )\n    }\n    else if(props.beNotDone){\n        return (\n            <View style={styles.content}>\n                {!done ? (<Switch value={done} onValueChange={(state) => {changeDone(state)}} />) : null}\n                {!done ? (<Text style={[styles.text_item, { textDecorationLine: done ? 'line-through' : 'none' }]}>{props.item.content}</Text>) : null}\n                {!done ? (<TouchableOpacity onPress={() => props.deleteTodo(props.item.id)}>\n                    <Image source={require('../assets/trash-can-outline.png')} style={{ height: 24, width: 24 }} />\n                </TouchableOpacity>) : null}\n\n            </View>\n        )\n    }\n    else{\n       return (\n           <View style={styles.content}>\n               <Switch value={done} onValueChange={(state) => {changeDone(state)}} />\n               <Text style={[styles.text_item, { textDecorationLine: done ? 'line-through' : 'none' }]}>{props.item.content}</Text>\n               <TouchableOpacity onPress={() => props.deleteTodo(props.item.id)}>\n                   <Image source={require('../assets/trash-can-outline.png')} style={{ height: 24, width: 24 }} />\n               </TouchableOpacity>\n\n           </View>\n       )\n    }\n\n}\n\nconst styles = StyleSheet.create({\n    content: {\n        flexDirection: 'row'\n    },\n    text_item: {\n        marginLeft: 10,\n        width: 150\n    }\n})"]},"metadata":{},"sourceType":"module"}