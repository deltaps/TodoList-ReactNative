{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { updateTaskList } from \"../API/todoAPI\";\nimport { TokenContext, UsernameContext } from \"../Context/Context\";\nexport default function TodoItem(props) {\n  var _useContext = useContext(UsernameContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      user = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var _useContext3 = useContext(TokenContext),\n      _useContext4 = _slicedToArray(_useContext3, 2),\n      token = _useContext4[0],\n      setToken = _useContext4[1];\n\n  var _useState = useState(props.item.done),\n      _useState2 = _slicedToArray(_useState, 2),\n      done = _useState2[0],\n      setDone = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      id = _useState4[0],\n      setId = _useState4[1];\n\n  var changeDone = function changeDone(state) {\n    console.log(token, id, state);\n    updateTaskList(token, id, state).then(function () {\n      setDone(state);\n      props.onPressed(state ? 1 : -1);\n    });\n  };\n\n  useEffect(function () {\n    setId(props.id);\n    changeDone(props.item.done);\n  }, [props.item.done]);\n  return props.beDone ? React.createElement(View, {\n    style: styles.content\n  }, done ? React.createElement(Switch, {\n    value: done,\n    onValueChange: function onValueChange(state) {\n      changeDone(state);\n    }\n  }) : null, done ? React.createElement(Text, {\n    style: [styles.text_item, {\n      textDecorationLine: done ? 'line-through' : 'none'\n    }]\n  }, props.item.content) : null, done ? React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return props.deleteTodo(props.item.id);\n    }\n  }, React.createElement(Image, {\n    source: require(\"../assets/trash-can-outline.png\"),\n    style: {\n      height: 24,\n      width: 24\n    }\n  })) : null) : props.beNotDone ? React.createElement(View, {\n    style: styles.content\n  }, !done ? React.createElement(Switch, {\n    value: done,\n    onValueChange: function onValueChange(state) {\n      changeDone(state);\n    }\n  }) : null, !done ? React.createElement(Text, {\n    style: [styles.text_item, {\n      textDecorationLine: done ? 'line-through' : 'none'\n    }]\n  }, props.item.content) : null, !done ? React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return props.deleteTodo(props.item.id);\n    }\n  }, React.createElement(Image, {\n    source: require(\"../assets/trash-can-outline.png\"),\n    style: {\n      height: 24,\n      width: 24\n    }\n  })) : null) : React.createElement(View, {\n    style: styles.content\n  }, React.createElement(Switch, {\n    value: done,\n    onValueChange: function onValueChange(state) {\n      changeDone(state);\n    }\n  }), React.createElement(Text, {\n    style: [styles.text_item, {\n      textDecorationLine: done ? 'line-through' : 'none'\n    }]\n  }, props.item.content), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return props.deleteTodo(props.item.id);\n    }\n  }, React.createElement(Image, {\n    source: require(\"../assets/trash-can-outline.png\"),\n    style: {\n      height: 24,\n      width: 24\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flexDirection: 'row'\n  },\n  text_item: {\n    marginLeft: 10,\n    width: 150\n  }\n});","map":{"version":3,"sources":["C:/Users/sacha/Documents/License-informatique/L3/semestre2/devMobile/TP2/app/components/TodoItem.js"],"names":["React","useContext","useEffect","useState","updateTaskList","TokenContext","UsernameContext","TodoItem","props","user","setUser","token","setToken","item","done","setDone","id","setId","changeDone","state","console","log","then","onPressed","beDone","styles","content","text_item","textDecorationLine","deleteTodo","require","height","width","beNotDone","StyleSheet","create","flexDirection","marginLeft"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from \"react\";\nimport { Image, View, Text, StyleSheet, Switch, TouchableOpacity } from 'react-native';\nimport {updateTaskList} from \"../API/todoAPI\";\nimport {TokenContext, UsernameContext} from \"../Context/Context\";\n\nexport default function TodoItem(props) {\n\n    const [user,setUser] = useContext(UsernameContext)\n    const [token,setToken] = useContext(TokenContext)\n    const [done, setDone] = useState(props.item.done);\n    const [id,setId] = useState(null);\n\n    const changeDone = (state) => {\n        console.log(token,id,state)\n        updateTaskList(token,id,state)\n            .then(() => {\n                setDone(state)\n                props.onPressed(state ? 1 : -1)\n            })\n    }\n\n    useEffect(() => {\n        setId(props.id)\n        changeDone(props.item.done)\n    }, [props.item.done])\n\n    return (props.beDone ? // Autre manière, mettre deux liste dans le père\n        (\n            <View style={styles.content}>\n                {done ? (<Switch value={done} onValueChange={(state) => {changeDone(state)}} />) : null}\n                {done ? (<Text style={[styles.text_item, { textDecorationLine: done ? 'line-through' : 'none' }]}>{props.item.content}</Text>) : null}\n                {done ? (<TouchableOpacity onPress={() => props.deleteTodo(props.item.id)}>\n                    <Image source={require('../assets/trash-can-outline.png')} style={{ height: 24, width: 24 }} />\n                </TouchableOpacity>) : null}\n\n            </View>\n        ) :\n    (props.beNotDone ?\n        (\n            <View style={styles.content}>\n                {!done ? (<Switch value={done} onValueChange={(state) => {changeDone(state)}} />) : null}\n                {!done ? (<Text style={[styles.text_item, { textDecorationLine: done ? 'line-through' : 'none' }]}>{props.item.content}</Text>) : null}\n                {!done ? (<TouchableOpacity onPress={() => props.deleteTodo(props.item.id)}>\n                    <Image source={require('../assets/trash-can-outline.png')} style={{ height: 24, width: 24 }} />\n                </TouchableOpacity>) : null}\n\n            </View>\n        )\n        :\n           (\n               <View style={styles.content}>\n                   <Switch value={done} onValueChange={(state) => {changeDone(state)}} />\n                   <Text style={[styles.text_item, { textDecorationLine: done ? 'line-through' : 'none' }]}>{props.item.content}</Text>\n                   <TouchableOpacity onPress={() => props.deleteTodo(props.item.id)}>\n                       <Image source={require('../assets/trash-can-outline.png')} style={{ height: 24, width: 24 }} />\n                   </TouchableOpacity>\n\n               </View>\n           )\n        )\n    )\n}\n\nconst styles = StyleSheet.create({\n    content: {\n        flexDirection: 'row'\n    },\n    text_item: {\n        marginLeft: 10,\n        width: 150\n    }\n})"]},"metadata":{},"sourceType":"module"}