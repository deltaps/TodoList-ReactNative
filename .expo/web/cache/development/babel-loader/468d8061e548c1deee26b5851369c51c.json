{"ast":null,"code":"var API_URL = 'http://127.0.0.1:4000/';\nvar SIGN_IN = 'mutation($username:String!, $password:String!){signIn(username:$username, password:$password)}';\nvar SIGN_UP = 'mutation($username:String!, $password:String!){signUp(username:$username, password:$password)}';\nvar TASK_LIST = 'query taskLists($username: String!) {taskLists(where: { owner: { username: $username } }) {id title}}';\nvar TASKS = 'query tasks($id: ID) {tasks(where: { belongsTo: { id: $id}}) {id content done}}';\nvar DELETETASK = 'mutation($id: ID){createTasks';\nexport function signIn(username, password) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: SIGN_IN,\n      variables: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.signIn;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function signUp(username, password) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: SIGN_UP,\n      variables: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.signUp;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function getTaskList(username, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: TASK_LIST,\n      variables: {\n        username: username\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.taskLists;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function getTasks(id, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: TASKS,\n      variables: {\n        id: id\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.tasks;\n  }).catch(function (error) {\n    throw error;\n  });\n}","map":{"version":3,"sources":["C:/Users/sacha/Documents/License-informatique/L3/semestre2/devMobile/TP2/app/API/todoAPI.js"],"names":["API_URL","SIGN_IN","SIGN_UP","TASK_LIST","TASKS","DELETETASK","signIn","username","password","fetch","method","headers","body","JSON","stringify","query","variables","then","response","json","jsonResponse","errors","data","catch","error","signUp","getTaskList","token","taskLists","getTasks","id","tasks"],"mappings":"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","sourcesContent":["const API_URL = 'http://127.0.0.1:4000/' //Mettre l'adresse du rÃ©seau local (le tel doit connaitre l'ip du pc)\r\nconst SIGN_IN =\r\n    'mutation($username:String!, $password:String!){signIn(username:$username, password:$password)}'\r\nconst SIGN_UP =\r\n    'mutation($username:String!, $password:String!){signUp(username:$username, password:$password)}'\r\nconst TASK_LIST =\r\n    'query taskLists($username: String!) {taskLists(where: { owner: { username: $username } }) {id title}}'\r\nconst TASKS =\r\n    'query tasks($id: ID) {tasks(where: { belongsTo: { id: $id}}) {id content done}}'\r\nconst DELETETASK =\r\n    'mutation($id: ID){createTasks'\r\n/*\r\nmutation {\r\n  createTasks(\r\n    input: {\r\n      content: \"ledone\"\r\n      done:true\r\n      belongsTo: {\r\n        connect: { where: { id: \"d60656c9-85dd-4ae8-915b-d14f07d414f5\" } }\r\n      }\r\n    }\r\n  ){\r\n    tasks{\r\n      id\r\n      content\r\n    }\r\n  }\r\n}\r\n*/\r\n\r\n/*\r\nquery($id: ID) {\r\n  tasks(where: { belongsTo: { id: $id } }) {\r\n    id\r\n    content\r\n  }\r\n}\r\n */\r\n\r\nexport function signIn (username, password) {\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            query: SIGN_IN,\r\n            variables: {\r\n                username: username,\r\n                password: password\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.signIn\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\n\r\nexport function signUp (username, password) {\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            query: SIGN_UP,\r\n            variables: {\r\n                username: username,\r\n                password: password\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.signUp\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\n\r\nexport function getTaskList (username,token) {\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: TASK_LIST,\r\n            variables: {\r\n                username: username,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.taskLists\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\nexport function getTasks(id,token){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: TASKS,\r\n            variables: {\r\n                id: id,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.tasks\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}"]},"metadata":{},"sourceType":"module"}