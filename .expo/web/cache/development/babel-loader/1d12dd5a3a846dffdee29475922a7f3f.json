{"ast":null,"code":"var API_URL = 'http://10.212.6.86:4000';\nvar SIGN_IN = 'mutation($username:String!, $password:String!){signIn(username:$username, password:$password)}';\nvar SIGN_UP = 'mutation($username:String!, $password:String!){signUp(username:$username, password:$password)}';\nvar TASK_LIST = 'query taskLists($username: String!) {taskLists(where: { owner: { username: $username } }) {id title}}';\nvar TASKS = 'query tasks($id: ID) {tasks(where: { belongsTo: { id: $id}}) {id content done}}';\nvar CREATETASK = 'mutation($id: ID,$content: String!){createTasks(input: {content: $content, belongsTo: {connect: {where: {id: $id}}}}){tasks{id,content}}}';\nvar DELETETASK = 'mutation($id:ID){deleteTasks(where:{id:$id}){nodesDeleted}}';\nvar UPDATETASK = 'mutation($id:ID,$done:Boolean) {updateTasks(where: { id: $id },update: { done: $done }){tasks{id}}}';\nvar UPDATETASK2 = 'mutation($id:ID,$done : Boolean,$title : String){updateTasks(where : {id:$id,belongsTo : {title : $title}}update : {done : $done}){tasks{id,content,done}}}';\nvar CREATETASKLIST = 'mutation($username: String!, $title: String!) {createTaskLists(input: {title: $title, owner: { connect: { where: { username: $username } } }}) {taskLists {id, title, owner {id , username}}}}';\nvar DELETETASKLIST = 'mutation($id:ID){deleteTaskLists(where:{id:$id}){nodesDeleted}}';\nvar CHECKROLE = 'query($username:String){users(where:{username:$username}){roles,id}}';\nvar USERS = 'query($username:String){users(where:{username_NOT:$username}){username,roles,id}}';\nvar DELETEUSER = 'mutation($id:ID) {deleteUsers(where: { id:$id }) {nodesDeleted}}';\nexport function signIn(username, password) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: SIGN_IN,\n      variables: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.signIn;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function signUp(username, password) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: SIGN_UP,\n      variables: {\n        username: username,\n        password: password\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.signUp;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function getTaskList(username, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: TASK_LIST,\n      variables: {\n        username: username\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.taskLists;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function getTasks(id, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: TASKS,\n      variables: {\n        id: id\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.tasks;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function createTask(content, token, id) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: CREATETASK,\n      variables: {\n        content: content,\n        id: id\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.createTasks;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function deleteTask(token, id) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: DELETETASK,\n      variables: {\n        id: id\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.deleteTasks;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function createTaskList(token, username, title) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: CREATETASKLIST,\n      variables: {\n        username: username,\n        title: title\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.createTaskLists;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function deleteTaskList(token, id) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: DELETETASKLIST,\n      variables: {\n        id: id\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.deleteTaskLists;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function updateTaskList(token, id, done) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: UPDATETASK,\n      variables: {\n        id: id,\n        done: done\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.updateTasks;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function updateTaskList2(token, id, done, title) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: UPDATETASK2,\n      variables: {\n        id: id,\n        done: done,\n        title: title\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.updateTasks;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function checkRole(username, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: CHECKROLE,\n      variables: {\n        username: username\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.users;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function users(username, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: USERS,\n      variables: {\n        username: username\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.users;\n  }).catch(function (error) {\n    throw error;\n  });\n}\nexport function deleteUsers(id, token) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'authorization': 'Bearer ' + token\n    },\n    body: JSON.stringify({\n      query: DELETEUSER,\n      variables: {\n        id: id\n      }\n    })\n  }).then(function (response) {\n    return response.json();\n  }).then(function (jsonResponse) {\n    if (jsonResponse.errors != null) {\n      throw jsonResponse.errors[0];\n    }\n\n    return jsonResponse.data.deleteUsers;\n  }).catch(function (error) {\n    throw error;\n  });\n}","map":{"version":3,"sources":["C:/Users/sacha/Documents/License-informatique/L3/semestre2/devMobile/TP2/app/API/todoAPI.js"],"names":["API_URL","SIGN_IN","SIGN_UP","TASK_LIST","TASKS","CREATETASK","DELETETASK","UPDATETASK","UPDATETASK2","CREATETASKLIST","DELETETASKLIST","CHECKROLE","USERS","DELETEUSER","signIn","username","password","fetch","method","headers","body","JSON","stringify","query","variables","then","response","json","jsonResponse","errors","data","catch","error","signUp","getTaskList","token","taskLists","getTasks","id","tasks","createTask","content","createTasks","deleteTask","deleteTasks","createTaskList","title","createTaskLists","deleteTaskList","deleteTaskLists","updateTaskList","done","updateTasks","updateTaskList2","checkRole","users","deleteUsers"],"mappings":"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","sourcesContent":["//const API_URL = 'http://192.168.1.18:4000'\r\nconst API_URL = 'http://10.212.6.86:4000'\r\n//const API_URL = 'http://127.0.0.1:4000/' //Mettre l'adresse du réseau local (le tel doit connaitre l'ip du pc)\r\nconst SIGN_IN =\r\n    'mutation($username:String!, $password:String!){signIn(username:$username, password:$password)}'\r\nconst SIGN_UP =\r\n    'mutation($username:String!, $password:String!){signUp(username:$username, password:$password)}'\r\nconst TASK_LIST =\r\n    'query taskLists($username: String!) {taskLists(where: { owner: { username: $username } }) {id title}}'\r\nconst TASKS =\r\n    'query tasks($id: ID) {tasks(where: { belongsTo: { id: $id}}) {id content done}}'\r\nconst CREATETASK =\r\n    'mutation($id: ID,$content: String!){createTasks(input: {content: $content, belongsTo: {connect: {where: {id: $id}}}}){tasks{id,content}}}'\r\nconst DELETETASK =\r\n    'mutation($id:ID){deleteTasks(where:{id:$id}){nodesDeleted}}'\r\nconst UPDATETASK =\r\n    'mutation($id:ID,$done:Boolean) {updateTasks(where: { id: $id },update: { done: $done }){tasks{id}}}'\r\nconst UPDATETASK2 =\r\n    'mutation($id:ID,$done : Boolean,$title : String){updateTasks(where : {id:$id,belongsTo : {title : $title}}update : {done : $done}){tasks{id,content,done}}}'\r\nconst CREATETASKLIST =\r\n    'mutation($username: String!, $title: String!) {createTaskLists(input: {title: $title, owner: { connect: { where: { username: $username } } }}) {taskLists {id, title, owner {id , username}}}}'\r\nconst DELETETASKLIST =\r\n    'mutation($id:ID){deleteTaskLists(where:{id:$id}){nodesDeleted}}'\r\nconst CHECKROLE =\r\n    'query($username:String){users(where:{username:$username}){roles,id}}'\r\nconst USERS =\r\n    'query($username:String){users(where:{username_NOT:$username}){username,roles,id}}'\r\nconst DELETEUSER =\r\n    'mutation($id:ID) {deleteUsers(where: { id:$id }) {nodesDeleted}}'\r\n\r\nexport function signIn (username, password) {\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            query: SIGN_IN,\r\n            variables: {\r\n                username: username,\r\n                password: password\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.signIn\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\n\r\nexport function signUp (username, password) {\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            query: SIGN_UP,\r\n            variables: {\r\n                username: username,\r\n                password: password\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.signUp\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\n\r\nexport function getTaskList (username,token) {\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: TASK_LIST,\r\n            variables: {\r\n                username: username,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.taskLists\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\nexport function getTasks(id,token){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: TASKS,\r\n            variables: {\r\n                id: id,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.tasks\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\nexport function createTask(content,token,id){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: CREATETASK,\r\n            variables: {\r\n                content: content,\r\n                id: id,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.createTasks\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\n\r\nexport function deleteTask(token,id){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: DELETETASK,\r\n            variables: {\r\n                id: id,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.deleteTasks\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\nexport function createTaskList(token,username,title){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: CREATETASKLIST,\r\n            variables: {\r\n                username: username,\r\n                title: title,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.createTaskLists\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\nexport function deleteTaskList(token,id){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: DELETETASKLIST,\r\n            variables: {\r\n                id:id,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.deleteTaskLists\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\nexport function updateTaskList(token,id,done){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: UPDATETASK,\r\n            variables: {\r\n                id:id,\r\n                done:done,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.updateTasks\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\nexport function updateTaskList2(token,id,done,title){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: UPDATETASK2,\r\n            variables: {\r\n                id:id,\r\n                done:done,\r\n                title:title,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.updateTasks\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\nexport function checkRole(username,token){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: CHECKROLE,\r\n            variables: {\r\n                username:username,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.users\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\n\r\nexport function users(username,token){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: USERS,\r\n            variables: {\r\n                username:username,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.users\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}\r\n\r\nexport function deleteUsers(id,token){\r\n    return fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'authorization' : 'Bearer ' + token\r\n        },\r\n        body: JSON.stringify({\r\n            query: DELETEUSER,\r\n            variables: {\r\n                id:id,\r\n            }\r\n        })\r\n    })\r\n        .then(response => {\r\n            //console.log(\"Response\", response.json())\r\n            return response.json()\r\n        })\r\n        .then(jsonResponse => {\r\n            //console.log(\"Json\",jsonResponse)\r\n            if (jsonResponse.errors != null) {\r\n                throw jsonResponse.errors[0]\r\n            }\r\n            return jsonResponse.data.deleteUsers\r\n        })\r\n        .catch(error => {\r\n            throw error\r\n        })\r\n}"]},"metadata":{},"sourceType":"module"}